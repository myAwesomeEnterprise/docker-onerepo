version: "3.7"

services:

  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - redisData:/data
    networks:
      - servicesNetwork

  rabbitmq:
    image: 'rabbitmq:3.7-alpine'
    container_name: events_rabbit
    ports:
      - '4369:4369'
      - '5672:5672'
      - '25672:25672'
      - '15672:15672'
    networks:
      - servicesNetwork
    volumes:
      - 'rabbitmqData:/bitnami'
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=events


  # ------ GATEWAY KONG
  kong_migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - kong_db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    links:
      - kong_db:db
    networks:
      - servicesNetwork
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-root}"
    depends_on:
      - kong_db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: kong_db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong_db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: debug
    networks:
      - servicesNetwork
    ports:
      - "8000:8000/tcp"
      - "8001/tcp"
      - "8443:8443/tcp"
      - "8444/tcp"
    volumes:
      - ./docker/kong/conf/kong.conf:/etc/kong/kong.conf
      - ./docker/kong/plugins:/etc/kong/plugins
    restart: on-failure

  kong_db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    ports:
      - '5432'
    networks:
      - servicesNetwork
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://${KONG_PG_USER:-kong}:${KONG_PG_PASSWORD:-kong}@kong_db:5432/konga_db"
    networks:
      - servicesNetwork
    restart: on-failure
    links:
      - kong_db
    depends_on:
      - kong_db

  konga:
    image: pantsel/konga:next
    restart: always
    networks:
      - servicesNetwork
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong_db
      DB_USER: ${KONG_PG_USER:-kong}
      DB_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - konga-prepare
    ports:
      - "1337:1337"


  # ------ API GATEWAY
  gateway_webserver:
    image: nginx:alpine
    container_name: 'gateway_webserver'
    ports:
      - "8002:80"
    volumes:
      - ./docker/nginx/gateway/sites:/etc/nginx/conf.d
      - ./docker/nginx/gateway/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./services/gateway:/var/www/html
    networks:
      - servicesNetwork

  gateway_php:
    build: docker/php
    container_name: 'gateway_php'
    volumes:
      - ./services/gateway:/var/www/html
    networks:
      - servicesNetwork


  # ------ USERS SERVICE
  users.dev:
    image: nginx:alpine
    container_name: 'users.dev'
    ports:
      - "80"
      - "443"
    volumes:
      - ./docker/nginx/users/sites:/etc/nginx/conf.d
      - ./docker/nginx/users/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/users/ssl:/etc/nginx/ssl
      - ./services/users:/var/www/html
    networks:
      - servicesNetwork

  users_php:
    build: docker/php
    container_name: 'users_php'
    ports:
      - "9001:9001"
    # docker-compose exec users_php supervisord -c /etc/supervisord.conf
    volumes:
      - ./services/users:/var/www/html
      - ./services/users/supervisor/supervisord.conf:/etc/supervisord.conf
    networks:
      - servicesNetwork

  users_db:
    image: mysql:5.7
    container_name: users_db
    ports:
      - "33060:3306"
    volumes:
      - usersDbData:/var/lib/mysql
    networks:
      - servicesNetwork
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: users
      MYSQL_USER: users
      MYSQL_PASSWORD: secret


  # ------ ACL SERVICE
  acl_webserver:
    image: nginx:alpine
    container_name: 'acl_webserver'
    ports:
      - "8011:80"
    volumes:
      - ./docker/nginx/acl/sites:/etc/nginx/conf.d
      - ./docker/nginx/acl/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./services/acl:/var/www/html
    networks:
      - servicesNetwork

  acl_php:
    build: docker/php
    container_name: 'acl_php'
    ports:
      - "9002:9001"
    # docker-compose exec acl_php supervisord -c /etc/supervisord.conf
    volumes:
      - ./services/acl:/var/www/html
      - ./services/acl/supervisor/supervisord.conf:/etc/supervisord.conf
    networks:
      - servicesNetwork

  acl_db:
    image: mysql:5.7
    container_name: acl_db
    ports:
      - "33061:3306"
    volumes:
      - aclDbData:/var/lib/mysql
    networks:
      - servicesNetwork
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: acl
      MYSQL_USER: acl
      MYSQL_PASSWORD: secret


networks:
  servicesNetwork:
    driver: "bridge"


volumes:
  redisData:
    driver: "local"
  rabbitmqData:
    driver: "local"
  usersDbData:
    driver: "local"
  aclDbData:
    driver: "local"
  kong_data:
    driver: "local"
